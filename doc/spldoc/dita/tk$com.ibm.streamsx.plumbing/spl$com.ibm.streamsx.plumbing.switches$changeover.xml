<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="spldoc_compilationunit">
<title>SPL File <tt>changeover.spl</tt></title>
<refbody>
<section>
<p>
<xref href="../toolkits/toolkits.xml">streamsx.plumbing</xref> &gt; <xref href="tk$com.ibm.streamsx.plumbing.xml">com.ibm.streamsx.plumbing 0.3.0.__dev__</xref> &gt; <xref href="ns$com.ibm.streamsx.plumbing.switches.xml">com.ibm.streamsx.plumbing.switches</xref> &gt; changeover.spl</p>
</section>
<section>
  <title outputclass="splhead-1">Content</title>
  <dl>
    <dlentry><dt></dt><dd></dd></dlentry>
    <dlentry>
      <dt outputclass="splhead-2">Operators</dt>
      <dd>
<sl>
<sli><b><xref href="spl$com.ibm.streamsx.plumbing.switches$changeover.xml#spldoc_compilationunit/composite_operator__Changeover">Changeover</xref></b>: Changeover switch.
</sli>
<sli><b><xref href="spl$com.ibm.streamsx.plumbing.switches$changeover.xml#spldoc_compilationunit/composite_operator__ControlledChangeover">ControlledChangeover</xref></b>: Controlled changeover switch.
</sli>
</sl>
      </dd>
    </dlentry>
    <dlentry>
      <dt outputclass="splhead-2">Functions</dt>
      <dd>
<sl>
<sli><b><xref href="spl$com.ibm.streamsx.plumbing.switches$changeover.xml#spldoc_compilationunit/function____initChangeover.rstring.boolean">__initChangeover(rstring, boolean)</xref></b>
</sli>
</sl>
      </dd>
    </dlentry>
  </dl>
</section>
<section>
  <title outputclass="splhead-1">Composites</title>
</section>
<section id="composite_operator__Changeover">
  <title outputclass="splpart">composite Changeover(output CLOSE, OPEN; input IN, CONTROL)</title>
</section>
<section>

<p>Changeover switch. <tt>Changeover</tt> has the same control api as the <tt>Switch</tt> operator in the SPL standard toolkit, but delivers tuples and punctuation to a second output port <tt>OPEN</tt> when the switch is open, instead of blocking.
</p>
</section>
<section>
<title>Parameters</title>
<sl>
<sli><b>initialState</b>: This is an optional parameter of type boolean, which specifies if the this operator starts in the open (<tt>false</tt> -&gt; submits tuples to output port <tt>OPEN</tt>) or closed (<tt>true</tt> -&gt; submits tuples to output port <tt>CLOSE</tt>). If not specified, the default is <tt>false</tt> (tuples are submitted to <tt>OPEN</tt>). 
</sli>
<sli><b>status</b>: This is a mandatory parameter of type boolean, which specifies if the Switch is open or closed. The expression is evaluated each time a tuple arrives on the second (<tt>CONTROL</tt>) port. If the expression evaluates to <tt>true</tt>, the switch will flow tuples to <tt>CLOSED</tt>. If the expression evaluates to <tt>false</tt>, the switch will flow tuples to <tt>OPEN</tt>. 
</sli>
</sl>
</section>
<section>
<title>Input Ports</title>
<sl>
<sli><b>IN</b>: Input stream to be switched.
</sli>
<sli><b>CONTROL</b>: Stream to control switching of <tt>IN</tt>.
</sli>
</sl>
</section>
<section>
<title>Output Ports</title>
<sl>
<sli><b>CLOSE</b>: Output port tuples and punctuation are submitted to when the switch is closed.
</sli>
<sli><b>OPEN</b>: Output port tuples and punctuation are submitted to when the switch is open.
</sli>
</sl>
</section>
<section>
  <title outputclass="splhead-2">Composite Operator Graph</title>
</section>
<section outputclass="splgraph">
  <image href="../../image/tk$com.ibm.streamsx.plumbing/op$com.ibm.streamsx.plumbing.switches$Changeover.svg" width="146" height="107">
    <alt>SPL composite operator image not displayed. Problem loading file: ../../image/tk$com.ibm.streamsx.plumbing/op$com.ibm.streamsx.plumbing.switches$Changeover.svg
</alt>
  </image>
</section>
<section>
  <title outputclass="splhead-2">SPL Source Code</title>
</section>

<section>
   <codeblock>
<![CDATA[
 public composite Changeover (input IN, CONTROL; output CLOSE, OPEN) {
     param expression<boolean> $initialState : false; 
      expression<boolean> $status;
    graph
    (stream<IN> CLOSE; stream<IN> OPEN) as SPDT = Custom(IN ; CONTROL) {
      logic
      
      state: {mutable boolean closed = $initialState;}
      
      onTuple IN: if (closed) submit(IN, CLOSE);  else submit(IN, OPEN);
      onTuple CONTROL: closed = $status;
      onPunct IN:  if (closed) submit(currentPunct(), CLOSE); else submit(currentPunct(), OPEN);
    }
 }
]]>
   </codeblock>
</section>
<section id="composite_operator__ControlledChangeover">
  <title outputclass="splpart">composite ControlledChangeover(output CLOSE, OPEN; input IN)</title>
</section>
<section>

<p>Controlled changeover switch.
</p>
<p>A controlled version of <xref href="spl$com.ibm.streamsx.plumbing.switches$changeover.xml#spldoc_compilationunit/composite_operator__Changeover">Changeover</xref>.
</p>
<p>Operator invocations in the same job register an interest in controlling this switch by calling <xref href="spl$com.ibm.streamsx.plumbing.switches$controlledswitch.xml#spldoc_compilationunit/function__registerSwitch.rstring.boolean">registerSwitch(rstring, boolean)</xref> passing the name of this switch. Then the state of this switch is changed by calling <xref href="spl$com.ibm.streamsx.plumbing.switches$controlledswitch.xml#spldoc_compilationunit/function__setSwitchState.rstring.boolean">setSwitchState(rstring, boolean)</xref>.
</p>
<p>A <tt>boolean</tt> control variable named <tt>name</tt> is created in the Job Control Plane which provides notifications and operations to control if the switch is open or closed. 
</p>
<p>Multiple invocations of <tt>ControlledChangeover</tt> can share the same name and will then be controlled by the same control variable. Any call to <xref href="spl$com.ibm.streamsx.plumbing.switches$controlledswitch.xml#spldoc_compilationunit/function__setSwitchState.rstring.boolean">setSwitchState(rstring, boolean)</xref> sets the state of all switches with the same name.
</p>
<p>In the case of failure the state of the switch is retained by the Job Control Plane.
</p>
<p>Any application that invokes this operator must include a single invocation of the <tt>spl.control::JobControlPlane</tt> operator.
</p>
</section>
<section>
<title>Parameters</title>
<sl>
<sli><b>name</b>: Name of the switch.
</sli>
<sli><b>initialState</b>: This is an optional parameter of type boolean, which specifies if the this operator starts in the open (<tt>false</tt> -&gt; submits tuples to output port <tt>OPEN</tt>) or closed (<tt>true</tt> -&gt; submits tuples to output port <tt>CLOSE</tt>). If not specified, the default is <tt>false</tt> (tuples are submitted to <tt>OPEN</tt>). 
</sli>
</sl>
</section>
<section>
<title>Input Ports</title>
<sl>
<sli><b>IN</b>: Input stream to be switched
</sli>
</sl>
</section>
<section>
<title>Output Ports</title>
<sl>
<sli><b>CLOSE</b>: Output port tuples and punctuation are submitted to when the switch is closed.
</sli>
<sli><b>OPEN</b>: Output port tuples and punctuation are submitted to when the switch is open.
</sli>
</sl>
</section>
<section>
  <title outputclass="splhead-2">Composite Operator Graph</title>
</section>
<section outputclass="splgraph">
  <image href="../../image/tk$com.ibm.streamsx.plumbing/op$com.ibm.streamsx.plumbing.switches$ControlledChangeover.svg" width="252" height="114">
    <alt>SPL composite operator image not displayed. Problem loading file: ../../image/tk$com.ibm.streamsx.plumbing/op$com.ibm.streamsx.plumbing.switches$ControlledChangeover.svg
</alt>
  </image>
</section>
<section>
  <title outputclass="splhead-2">SPL Source Code</title>
</section>

<section>
   <codeblock>
<![CDATA[
 public composite ControlledChangeover(input IN; output CLOSE, OPEN)
 {
    param
         expression<rstring> $name;
         expression<boolean> $initialState : false;
     graph
 
         (stream<IN> CLOSE; stream<IN> OPEN) as CtrlSPDT = Changeover(IN ; SwitchControl)
         {
             param
                 status : getSwitchState($name) ;
                 initialState: __initChangeover($name, $initialState);
             config placement: partitionColocation(getThisCompositeInstanceName());
         }
         // this issues an attribute change notification which is then
         // sent to the Changeover's control port. This will then call
         // getSwitchState() to set the switch to its correct state.
         stream<MBeanNotificationBase> SwitchControl = ControlVariableChange()
         {
             param
                 name : $name;
             config placement: partitionColocation(getThisCompositeInstanceName());
         }
 }
]]>
   </codeblock>
</section>
<section>
  <title outputclass="splhead-1">Functions</title>
</section>
<section id="function____initChangeover.rstring.boolean">
  <title outputclass="splpart">boolean __initChangeover(rstring name, boolean initialState)</title>
</section><section>
<title>Parameters</title>
 <sl>
   <sli>
<b>name</b>
   </sli>
   <sli>
<b>initialState</b>
   </sli>
 </sl>
</section>
<section>
<title>Returns</title>
<sl><sli>
<tt>boolean</tt>
</sli></sl>
</section>
<section>
  <title outputclass="splhead-2">SPL Source Code</title>
</section>
<section>
   <codeblock>
<![CDATA[
 stateful boolean __initChangeover(rstring name, boolean initialState)
 {
         __initSwitch(name, initialState);
 	return getSwitchState(name) ;
 }
]]>
   </codeblock>
</section>
</refbody>
</reference>

