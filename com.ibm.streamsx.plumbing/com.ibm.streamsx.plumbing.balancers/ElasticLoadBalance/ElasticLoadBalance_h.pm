
package ElasticLoadBalance_h;
use strict; use Cwd 'realpath';  use File::Basename;  use lib dirname(__FILE__);  use SPL::Operator::Instance::OperatorInstance; use SPL::Operator::Instance::Annotation; use SPL::Operator::Instance::Context; use SPL::Operator::Instance::Expression; use SPL::Operator::Instance::ExpressionTree; use SPL::Operator::Instance::ExpressionTreeEvaluator; use SPL::Operator::Instance::ExpressionTreeVisitor; use SPL::Operator::Instance::ExpressionTreeCppGenVisitor; use SPL::Operator::Instance::InputAttribute; use SPL::Operator::Instance::InputPort; use SPL::Operator::Instance::OutputAttribute; use SPL::Operator::Instance::OutputPort; use SPL::Operator::Instance::Parameter; use SPL::Operator::Instance::StateVariable; use SPL::Operator::Instance::TupleValue; use SPL::Operator::Instance::Window; 
sub main::generate($$) {
   my ($xml, $signature) = @_;  
   print "// $$signature\n";
   my $model = SPL::Operator::Instance::OperatorInstance->new($$xml);
   unshift @INC, dirname ($model->getContext()->getOperatorDirectory()) . "/../impl/nl/include";
   $SPL::CodeGenHelper::verboseMode = $model->getContext()->isVerboseModeOn();
   print '/*', "\n";
   print ' * Copyright (C) 2015 International Business Machines Corporation. ', "\n";
   print ' * All Rights Reserved.', "\n";
   print ' */', "\n";
   print "\n";
       use ElasticLoadBalanceCommon;
       ElasticLoadBalanceCommon::verify($model);
   print "\n";
   print "\n";
   print '#include <SPL/Runtime/Operator/Port/Punctuation.h>', "\n";
   print '#include <SPL/Runtime/Utility/Thread.h>', "\n";
   print '#include <SPL/Runtime/Utility/CV.h>', "\n";
   print '#include <CircularQueue.h>', "\n";
   print '#include <vector>', "\n";
   print '#include <time.h>', "\n";
   print "\n";
   print 'template <class Callback>', "\n";
   print 'class AlarmThread;', "\n";
   print 'class AdaptCallback;', "\n";
   print 'class ElasticAdaptation;', "\n";
   print "\n";
   SPL::CodeGen::headerPrologue($model);
   print "\n";
   print "\n";
   print 'class MY_OPERATOR : public MY_BASE_OPERATOR ', "\n";
   print '{', "\n";
   print 'public:', "\n";
   print '    MY_OPERATOR();', "\n";
   print '    ~MY_OPERATOR();', "\n";
   print "\n";
   print '    virtual void process(uint32_t index); ', "\n";
   print '    virtual void process(Tuple const & tuple, uint32_t port);', "\n";
   print '    virtual void process(Punctuation const & punct, uint32_t port);', "\n";
   print '    virtual void allPortsReady();', "\n";
   print '    void adapt();', "\n";
   print "\n";
   print 'private:', "\n";
   print '    volatile bool _done;', "\n";
   print '    uint32_t _currentBuf;', "\n";
   print '    uint32_t _bufferSize;', "\n";
   print '    uint32_t _numOutputPorts;', "\n";
   print '    uint32_t _numActivePorts;', "\n";
   print '    struct ItemType {', "\n";
   print '        Tuple* tuple;', "\n";
   print '        Punctuation punct;', "\n";
   print '        ItemType() {tuple = NULL; punct = Punctuation::Invalid;}', "\n";
   print '        ItemType(Tuple *t, Punctuation p) {tuple = t; punct = p;}', "\n";
   print '        bool isTuple() const {return punct == Punctuation::Invalid;}', "\n";
   print '    };', "\n";
   print '    std::vector<CircularQueue<ItemType> *> _buffers;', "\n";
   print '    Mutex _bufferMutex;', "\n";
   print '    Mutex _adaptMutex;', "\n";
   print "\n";
   print '    std::vector<bool> _sleep;', "\n";
   print '    std::vector<Mutex*> _sleepMutexes;', "\n";
   print '    std::vector<CV*> _sleepCVs;', "\n";
   print "\n";
   print '    volatile bool _stop;', "\n";
   print '    volatile bool _adapt;', "\n";
   print '    const int64_t _measurePeriod;', "\n";
   print '    AlarmThread<AdaptCallback>* _alarm;', "\n";
   print "\n";
   print '    time_t _prevTime;', "\n";
   print '    uint64_t _prevTuples;', "\n";
   print '    uint64_t _prevOutTuples;', "\n";
   print '    ElasticAdaptation* _adaptAlg;', "\n";
   print "\n";
   print '    void process(ItemType const & item);', "\n";
   print '    inline void pause();', "\n";
   print "\n";
   print '    double getThroughput();', "\n";
   print '    bool isCongested();', "\n";
   print '}; ', "\n";
   print "\n";
   SPL::CodeGen::headerEpilogue($model);
   print "\n";
   print "\n";
   CORE::exit $SPL::CodeGen::USER_ERROR if ($SPL::CodeGen::sawError);
}
1;
