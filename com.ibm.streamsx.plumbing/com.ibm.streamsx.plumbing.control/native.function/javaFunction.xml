<?xml version="1.0" encoding="UTF-8"?><functionModel xmlns="http://www.ibm.com/xmlns/prod/streams/spl/function" xmlns:cmn="http://www.ibm.com/xmlns/prod/streams/spl/common" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.ibm.com/xmlns/prod/streams/spl/function functionModel.xsd">
  <!--DO NOT EDIT THIS FILE - it is machine generated-->
  <functionSet>
    <headerFileName>SPL_JNIFunctions_com_ibm_streamsx_plumbing_control.h</headerFileName>
    <cppNamespaceName>SPL::JNIFunctions::com::ibm::streamsx::plumbing::control::SPL_JNIFunctions</cppNamespaceName>
    <functions>
      <function>
        <!--Generated from com.ibm.streamsx.plumbing.control.BoolanVariables in impl/lib/com.ibm.streamsx.plumbing.jar at Sun Jul 31 01:13:54 EDT 2016-->
        <description>Create a `boolean` control variable named `name`. If `shared` is `true` then the control variable is intended for use by multiple operators,if `false` then the control variable is intended for use for a single operator. A control variable may be created by multiple operators, the first will create the MXBeanrepresenting the control variable, subsequent creates will just reference the exisitng MXBean.</description>
        <prototype><![CDATA[<string T> public stateful boolean createBooleanControlVariable(T name, boolean shared, boolean initialValue)]]></prototype>
        <javaFunctionName>public static boolean com.ibm.streamsx.plumbing.control.BoolanVariables.createBooleanControlVariable(java.lang.String,boolean,boolean)</javaFunctionName>
      </function>
      <function>
        <!--Generated from com.ibm.streamsx.plumbing.control.BoolanVariables in impl/lib/com.ibm.streamsx.plumbing.jar at Sun Jul 31 01:13:54 EDT 2016-->
        <description>Set the value of `name` `boolean` control variable to `value`. Any operator invoking this function must call `createBooleanControlVariable`, typically in its `logic state` clause, before invoking this function.</description>
        <prototype><![CDATA[<string T> public stateful void setBooleanControlVariable(T name, boolean value)]]></prototype>
        <javaFunctionName>public static void com.ibm.streamsx.plumbing.control.BoolanVariables.setBooleanControlVariable(java.lang.String,boolean)</javaFunctionName>
      </function>
      <function>
        <!--Generated from com.ibm.streamsx.plumbing.control.BoolanVariables in impl/lib/com.ibm.streamsx.plumbing.jar at Sun Jul 31 01:13:54 EDT 2016-->
        <description>Get the value of `name` `boolean` control variable. Any operator invoking this function must call `createBooleanControlVariable`, typically in its `logic state` clause, before invoking this function.</description>
        <prototype><![CDATA[<string T> public boolean getBooleanControlVariable(T name)]]></prototype>
        <javaFunctionName>public static boolean com.ibm.streamsx.plumbing.control.BoolanVariables.getBooleanControlVariable(java.lang.String)</javaFunctionName>
      </function>
      <function>
        <!--Generated from com.ibm.streamsx.plumbing.control.Float64Variables in impl/lib/com.ibm.streamsx.plumbing.jar at Sun Jul 31 01:13:54 EDT 2016-->
        <description>Create a `float64` control variable named `name`. If `shared` is `true` then the control variable is intended for use by multiple operators,if `false` then the control variable is intended for use for a single operator. A control variable may be created by multiple operators, the first will create the MXBeanrepresenting the control variable, subsequent creates will just reference the exisitng MXBean.</description>
        <prototype><![CDATA[<string T> public stateful boolean createFloat64ControlVariable(T name, boolean shared, float64 initialValue)]]></prototype>
        <javaFunctionName>public static boolean com.ibm.streamsx.plumbing.control.Float64Variables.createFloat64ControlVariable(java.lang.String,boolean,double)</javaFunctionName>
      </function>
      <function>
        <!--Generated from com.ibm.streamsx.plumbing.control.Float64Variables in impl/lib/com.ibm.streamsx.plumbing.jar at Sun Jul 31 01:13:54 EDT 2016-->
        <description>Set the value of `name` `float64` control variable to `value`. Any operator invoking this function must call `createFloat64ControlVariable`, typically in its `logic state` clause, before invoking this function.</description>
        <prototype><![CDATA[<string T> public stateful void setFloat64ControlVariable(T name, float64 value)]]></prototype>
        <javaFunctionName>public static void com.ibm.streamsx.plumbing.control.Float64Variables.setFloat64ControlVariable(java.lang.String,double)</javaFunctionName>
      </function>
      <function>
        <!--Generated from com.ibm.streamsx.plumbing.control.Float64Variables in impl/lib/com.ibm.streamsx.plumbing.jar at Sun Jul 31 01:13:54 EDT 2016-->
        <description>Get the value of `name` `float64` control variable. Any operator invoking this function must call `createFloat64ControlVariable`, typically in its `logic state` clause, before invoking this function.</description>
        <prototype><![CDATA[<string T> public float64 getFloat64ControlVariable(T name)]]></prototype>
        <javaFunctionName>public static double com.ibm.streamsx.plumbing.control.Float64Variables.getFloat64ControlVariable(java.lang.String)</javaFunctionName>
      </function>
    </functions>
    <dependencies>
      <library>
        <cmn:description>C++ interface to Java native functions.</cmn:description>
        <cmn:managedLibrary>
          <cmn:lib>streams-stdtk-javaop</cmn:lib>
          <cmn:lib>streams-stdtk-runtime</cmn:lib>
          <cmn:includePath>.</cmn:includePath>
        </cmn:managedLibrary>
      </library>
      <library>
        <cmn:description>Java JNI.</cmn:description>
        <cmn:managedLibrary>
          <cmn:lib>pthread</cmn:lib>
          <cmn:lib>dl</cmn:lib>
          <cmn:includePath>@JAVA_HOME@/include</cmn:includePath>
          <cmn:command>@STREAMS_TOOLKIT_DIR@/impl/bin/JavaOp_vmpath.sh</cmn:command>
        </cmn:managedLibrary>
      </library>
    </dependencies>
  </functionSet>
</functionModel>