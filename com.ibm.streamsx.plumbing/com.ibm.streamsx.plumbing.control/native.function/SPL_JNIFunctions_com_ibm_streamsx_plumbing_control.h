// DO NOT EDIT THIS FILE - it is machine generated
#ifndef SPL_JNIFunctions_com_ibm_streamsx_plumbing_control_h
#define SPL_JNIFunctions_com_ibm_streamsx_plumbing_control_h

#include <SPL/Runtime/Function/SPLJavaFunction.h>
#include <SPL/Runtime/Type/SPLType.h>

namespace SPL {
namespace JNIFunctions {
namespace com {
namespace ibm {
namespace streamsx {
namespace plumbing {
namespace control {
class SPL_JNIFunctions {
public:

// Generated from com.ibm.streamsx.plumbing.control.BoolanVariables in impl/lib/com.ibm.streamsx.plumbing.jar at Sun Jul 31 01:13:54 EDT 2016
static SPL::boolean createBooleanControlVariable(SPL::ustring const & arg1, SPL::boolean const & arg2, SPL::boolean const & arg3) {
    static __thread void *func;
    static __thread jclass classGlobalRef;
    static __thread jmethodID mid;
    if (func == NULL) {
        func = SPL::SPLJavaFunction::loadFunction("com.ibm.streamsx.plumbing", "0.3.0.__dev__", SPLJAVAFUNCTION_ADL_FILENAME, "impl/lib/com.ibm.streamsx.plumbing.jar", "com.ibm.streamsx.plumbing.control.BoolanVariables", "createBooleanControlVariable", "(Ljava/lang/String;ZZ)Z", "com.ibm.streamsx.plumbing.control", "<string T> public stateful boolean createBooleanControlVariable(T name, boolean shared, boolean initialValue)", &classGlobalRef, &mid);
    }
    JNIEnv* env = SPL::SPLJavaFunction::getJNIEnv(func);
    jstring obj1 = env->NewString((jchar *) arg1.getBuffer(), (jsize) arg1.length());
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCreateError(func);
    SPL::boolean result = env->CallStaticBooleanMethod(classGlobalRef, mid, obj1, (jboolean) arg2, (jboolean) arg3);
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCallError(func);
    env->DeleteLocalRef(obj1);
    return result;
}

// Generated from com.ibm.streamsx.plumbing.control.BoolanVariables in impl/lib/com.ibm.streamsx.plumbing.jar at Sun Jul 31 01:13:54 EDT 2016
static SPL::boolean createBooleanControlVariable(SPL::rstring const & arg1, SPL::boolean const & arg2, SPL::boolean const & arg3) {
    SPL::boolean result = createBooleanControlVariable(SPL::ustring::fromUTF8(arg1), arg2, arg3);
    return result;
}

// Generated from com.ibm.streamsx.plumbing.control.BoolanVariables in impl/lib/com.ibm.streamsx.plumbing.jar at Sun Jul 31 01:13:54 EDT 2016
template <SPL::int32 msize>
static SPL::boolean createBooleanControlVariable(SPL::bstring<msize> const & arg1, SPL::boolean const & arg2, SPL::boolean const & arg3) {
    SPL::boolean result = createBooleanControlVariable((SPL::rstring) arg1, arg2, arg3);
    return result;
}

// Generated from com.ibm.streamsx.plumbing.control.BoolanVariables in impl/lib/com.ibm.streamsx.plumbing.jar at Sun Jul 31 01:13:54 EDT 2016
static void setBooleanControlVariable(SPL::ustring const & arg1, SPL::boolean const & arg2) {
    static __thread void *func;
    static __thread jclass classGlobalRef;
    static __thread jmethodID mid;
    if (func == NULL) {
        func = SPL::SPLJavaFunction::loadFunction("com.ibm.streamsx.plumbing", "0.3.0.__dev__", SPLJAVAFUNCTION_ADL_FILENAME, "impl/lib/com.ibm.streamsx.plumbing.jar", "com.ibm.streamsx.plumbing.control.BoolanVariables", "setBooleanControlVariable", "(Ljava/lang/String;Z)V", "com.ibm.streamsx.plumbing.control", "<string T> public stateful void setBooleanControlVariable(T name, boolean value)", &classGlobalRef, &mid);
    }
    JNIEnv* env = SPL::SPLJavaFunction::getJNIEnv(func);
    jstring obj1 = env->NewString((jchar *) arg1.getBuffer(), (jsize) arg1.length());
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCreateError(func);
    env->CallStaticVoidMethod(classGlobalRef, mid, obj1, (jboolean) arg2);
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCallError(func);
    env->DeleteLocalRef(obj1);
}

// Generated from com.ibm.streamsx.plumbing.control.BoolanVariables in impl/lib/com.ibm.streamsx.plumbing.jar at Sun Jul 31 01:13:54 EDT 2016
static void setBooleanControlVariable(SPL::rstring const & arg1, SPL::boolean const & arg2) {
    setBooleanControlVariable(SPL::ustring::fromUTF8(arg1), arg2);
}

// Generated from com.ibm.streamsx.plumbing.control.BoolanVariables in impl/lib/com.ibm.streamsx.plumbing.jar at Sun Jul 31 01:13:54 EDT 2016
template <SPL::int32 msize>
static void setBooleanControlVariable(SPL::bstring<msize> const & arg1, SPL::boolean const & arg2) {
    setBooleanControlVariable((SPL::rstring) arg1, arg2);
}

// Generated from com.ibm.streamsx.plumbing.control.BoolanVariables in impl/lib/com.ibm.streamsx.plumbing.jar at Sun Jul 31 01:13:54 EDT 2016
static SPL::boolean getBooleanControlVariable(SPL::ustring const & arg1) {
    static __thread void *func;
    static __thread jclass classGlobalRef;
    static __thread jmethodID mid;
    if (func == NULL) {
        func = SPL::SPLJavaFunction::loadFunction("com.ibm.streamsx.plumbing", "0.3.0.__dev__", SPLJAVAFUNCTION_ADL_FILENAME, "impl/lib/com.ibm.streamsx.plumbing.jar", "com.ibm.streamsx.plumbing.control.BoolanVariables", "getBooleanControlVariable", "(Ljava/lang/String;)Z", "com.ibm.streamsx.plumbing.control", "<string T> public boolean getBooleanControlVariable(T name)", &classGlobalRef, &mid);
    }
    JNIEnv* env = SPL::SPLJavaFunction::getJNIEnv(func);
    jstring obj1 = env->NewString((jchar *) arg1.getBuffer(), (jsize) arg1.length());
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCreateError(func);
    SPL::boolean result = env->CallStaticBooleanMethod(classGlobalRef, mid, obj1);
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCallError(func);
    env->DeleteLocalRef(obj1);
    return result;
}

// Generated from com.ibm.streamsx.plumbing.control.BoolanVariables in impl/lib/com.ibm.streamsx.plumbing.jar at Sun Jul 31 01:13:54 EDT 2016
static SPL::boolean getBooleanControlVariable(SPL::rstring const & arg1) {
    SPL::boolean result = getBooleanControlVariable(SPL::ustring::fromUTF8(arg1));
    return result;
}

// Generated from com.ibm.streamsx.plumbing.control.BoolanVariables in impl/lib/com.ibm.streamsx.plumbing.jar at Sun Jul 31 01:13:54 EDT 2016
template <SPL::int32 msize>
static SPL::boolean getBooleanControlVariable(SPL::bstring<msize> const & arg1) {
    SPL::boolean result = getBooleanControlVariable((SPL::rstring) arg1);
    return result;
}

// Generated from com.ibm.streamsx.plumbing.control.Float64Variables in impl/lib/com.ibm.streamsx.plumbing.jar at Sun Jul 31 01:13:54 EDT 2016
static SPL::boolean createFloat64ControlVariable(SPL::ustring const & arg1, SPL::boolean const & arg2, SPL::float64 const & arg3) {
    static __thread void *func;
    static __thread jclass classGlobalRef;
    static __thread jmethodID mid;
    if (func == NULL) {
        func = SPL::SPLJavaFunction::loadFunction("com.ibm.streamsx.plumbing", "0.3.0.__dev__", SPLJAVAFUNCTION_ADL_FILENAME, "impl/lib/com.ibm.streamsx.plumbing.jar", "com.ibm.streamsx.plumbing.control.Float64Variables", "createFloat64ControlVariable", "(Ljava/lang/String;ZD)Z", "com.ibm.streamsx.plumbing.control", "<string T> public stateful boolean createFloat64ControlVariable(T name, boolean shared, float64 initialValue)", &classGlobalRef, &mid);
    }
    JNIEnv* env = SPL::SPLJavaFunction::getJNIEnv(func);
    jstring obj1 = env->NewString((jchar *) arg1.getBuffer(), (jsize) arg1.length());
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCreateError(func);
    SPL::boolean result = env->CallStaticBooleanMethod(classGlobalRef, mid, obj1, (jboolean) arg2, arg3);
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCallError(func);
    env->DeleteLocalRef(obj1);
    return result;
}

// Generated from com.ibm.streamsx.plumbing.control.Float64Variables in impl/lib/com.ibm.streamsx.plumbing.jar at Sun Jul 31 01:13:54 EDT 2016
static SPL::boolean createFloat64ControlVariable(SPL::rstring const & arg1, SPL::boolean const & arg2, SPL::float64 const & arg3) {
    SPL::boolean result = createFloat64ControlVariable(SPL::ustring::fromUTF8(arg1), arg2, arg3);
    return result;
}

// Generated from com.ibm.streamsx.plumbing.control.Float64Variables in impl/lib/com.ibm.streamsx.plumbing.jar at Sun Jul 31 01:13:54 EDT 2016
template <SPL::int32 msize>
static SPL::boolean createFloat64ControlVariable(SPL::bstring<msize> const & arg1, SPL::boolean const & arg2, SPL::float64 const & arg3) {
    SPL::boolean result = createFloat64ControlVariable((SPL::rstring) arg1, arg2, arg3);
    return result;
}

// Generated from com.ibm.streamsx.plumbing.control.Float64Variables in impl/lib/com.ibm.streamsx.plumbing.jar at Sun Jul 31 01:13:54 EDT 2016
static void setFloat64ControlVariable(SPL::ustring const & arg1, SPL::float64 const & arg2) {
    static __thread void *func;
    static __thread jclass classGlobalRef;
    static __thread jmethodID mid;
    if (func == NULL) {
        func = SPL::SPLJavaFunction::loadFunction("com.ibm.streamsx.plumbing", "0.3.0.__dev__", SPLJAVAFUNCTION_ADL_FILENAME, "impl/lib/com.ibm.streamsx.plumbing.jar", "com.ibm.streamsx.plumbing.control.Float64Variables", "setFloat64ControlVariable", "(Ljava/lang/String;D)V", "com.ibm.streamsx.plumbing.control", "<string T> public stateful void setFloat64ControlVariable(T name, float64 value)", &classGlobalRef, &mid);
    }
    JNIEnv* env = SPL::SPLJavaFunction::getJNIEnv(func);
    jstring obj1 = env->NewString((jchar *) arg1.getBuffer(), (jsize) arg1.length());
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCreateError(func);
    env->CallStaticVoidMethod(classGlobalRef, mid, obj1, arg2);
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCallError(func);
    env->DeleteLocalRef(obj1);
}

// Generated from com.ibm.streamsx.plumbing.control.Float64Variables in impl/lib/com.ibm.streamsx.plumbing.jar at Sun Jul 31 01:13:54 EDT 2016
static void setFloat64ControlVariable(SPL::rstring const & arg1, SPL::float64 const & arg2) {
    setFloat64ControlVariable(SPL::ustring::fromUTF8(arg1), arg2);
}

// Generated from com.ibm.streamsx.plumbing.control.Float64Variables in impl/lib/com.ibm.streamsx.plumbing.jar at Sun Jul 31 01:13:54 EDT 2016
template <SPL::int32 msize>
static void setFloat64ControlVariable(SPL::bstring<msize> const & arg1, SPL::float64 const & arg2) {
    setFloat64ControlVariable((SPL::rstring) arg1, arg2);
}

// Generated from com.ibm.streamsx.plumbing.control.Float64Variables in impl/lib/com.ibm.streamsx.plumbing.jar at Sun Jul 31 01:13:54 EDT 2016
static SPL::float64 getFloat64ControlVariable(SPL::ustring const & arg1) {
    static __thread void *func;
    static __thread jclass classGlobalRef;
    static __thread jmethodID mid;
    if (func == NULL) {
        func = SPL::SPLJavaFunction::loadFunction("com.ibm.streamsx.plumbing", "0.3.0.__dev__", SPLJAVAFUNCTION_ADL_FILENAME, "impl/lib/com.ibm.streamsx.plumbing.jar", "com.ibm.streamsx.plumbing.control.Float64Variables", "getFloat64ControlVariable", "(Ljava/lang/String;)D", "com.ibm.streamsx.plumbing.control", "<string T> public float64 getFloat64ControlVariable(T name)", &classGlobalRef, &mid);
    }
    JNIEnv* env = SPL::SPLJavaFunction::getJNIEnv(func);
    jstring obj1 = env->NewString((jchar *) arg1.getBuffer(), (jsize) arg1.length());
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCreateError(func);
    SPL::float64 result = env->CallStaticDoubleMethod(classGlobalRef, mid, obj1);
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCallError(func);
    env->DeleteLocalRef(obj1);
    return result;
}

// Generated from com.ibm.streamsx.plumbing.control.Float64Variables in impl/lib/com.ibm.streamsx.plumbing.jar at Sun Jul 31 01:13:54 EDT 2016
static SPL::float64 getFloat64ControlVariable(SPL::rstring const & arg1) {
    SPL::float64 result = getFloat64ControlVariable(SPL::ustring::fromUTF8(arg1));
    return result;
}

// Generated from com.ibm.streamsx.plumbing.control.Float64Variables in impl/lib/com.ibm.streamsx.plumbing.jar at Sun Jul 31 01:13:54 EDT 2016
template <SPL::int32 msize>
static SPL::float64 getFloat64ControlVariable(SPL::bstring<msize> const & arg1) {
    SPL::float64 result = getFloat64ControlVariable((SPL::rstring) arg1);
    return result;
}

};
}
}
}
}
}
}
}
#endif
