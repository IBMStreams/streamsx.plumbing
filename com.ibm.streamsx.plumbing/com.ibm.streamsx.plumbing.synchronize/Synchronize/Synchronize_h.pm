
package Synchronize_h;
use strict; use Cwd 'realpath';  use File::Basename;  use lib dirname(__FILE__);  use SPL::Operator::Instance::OperatorInstance; use SPL::Operator::Instance::Annotation; use SPL::Operator::Instance::Context; use SPL::Operator::Instance::Expression; use SPL::Operator::Instance::ExpressionTree; use SPL::Operator::Instance::ExpressionTreeEvaluator; use SPL::Operator::Instance::ExpressionTreeVisitor; use SPL::Operator::Instance::ExpressionTreeCppGenVisitor; use SPL::Operator::Instance::InputAttribute; use SPL::Operator::Instance::InputPort; use SPL::Operator::Instance::OutputAttribute; use SPL::Operator::Instance::OutputPort; use SPL::Operator::Instance::Parameter; use SPL::Operator::Instance::StateVariable; use SPL::Operator::Instance::TupleValue; use SPL::Operator::Instance::Window; 
sub main::generate($$) {
   my ($xml, $signature) = @_;  
   print "// $$signature\n";
   my $model = SPL::Operator::Instance::OperatorInstance->new($$xml);
   unshift @INC, dirname ($model->getContext()->getOperatorDirectory()) . "/../impl/nl/include";
   $SPL::CodeGenHelper::verboseMode = $model->getContext()->isVerboseModeOn();
   print '/*', "\n";
   print ' * Copyright (C) 2013, 2016 International Business Machines Corporation. ', "\n";
   print ' * All Rights Reserved.', "\n";
   print ' */', "\n";
   print "\n";
   print "\n";
     use strict;
     use warnings;
   print "\n";
   print "\n";
   SPL::CodeGen::headerPrologue($model);
   print "\n";
   print "\n";
   print '#include <vector>', "\n";
   print "\n";
   print '#include <SPL/Runtime/Utility/Mutex.h>', "\n";
   print '#include <SPL/Runtime/Utility/CV.h>', "\n";
   print "\n";
   print "\n";
   print 'class MY_OPERATOR : public MY_BASE_OPERATOR ', "\n";
   print '{', "\n";
   print 'public:', "\n";
   print '  // Constructor', "\n";
   print '  MY_OPERATOR();', "\n";
   print "\n";
   print '  // Destructor', "\n";
   print '  virtual ~MY_OPERATOR(); ', "\n";
   print "\n";
   print '  // Notify port readiness', "\n";
   print '  void allPortsReady(); ', "\n";
   print "\n";
   print '  // Notify pending shutdown', "\n";
   print '  void prepareToShutdown(); ', "\n";
   print "\n";
   print '  // Processing for source and threaded operators   ', "\n";
   print '  void process(uint32_t idx);', "\n";
   print '    ', "\n";
   print '  // Tuple processing for mutating ports ', "\n";
   print '  void process(Tuple & tuple, uint32_t port);', "\n";
   print '    ', "\n";
   print '  // Tuple processing for non-mutating ports', "\n";
   print '  void process(Tuple const & tuple, uint32_t port);', "\n";
   print "\n";
   print '  // Punctuation processing', "\n";
   print '  void process(Punctuation const & punct, uint32_t port);', "\n";
   print "\n";
   print 'private:', "\n";
   print "\n";
   print '  // for parameters', "\n";
   print '  double timeFactor;', "\n";
   print '  bool ignorePunctuation;', "\n";
   print "\n";
   print '  // for synchronizing tuples', "\n";
   print '  volatile double previousSubmitTime; // clock time, shared by all ports', "\n";
   print '  volatile double previousTupleTimestamp; // tuple time, shared by all ports', "\n";
   print '  volatile double nextTimestamp[';
   print $model->getNumberOfInputPorts();
   print ']; // tuple time, per port', "\n";
   print "\n";
   print '  // for synchronizing threads at punctuation', "\n";
   print '  uint32_t stopCount[';
   print $model->getNumberOfInputPorts();
   print '];', "\n";
   print '  SPL::Mutex mutexStopped; ', "\n";
   print '  SPL::CV cvStopped; ', "\n";
   print '  ', "\n";
   print '  // for synchronizing threads after punctuation', "\n";
   print '  uint32_t clearCount[';
   print $model->getNumberOfInputPorts();
   print '];', "\n";
   print '  SPL::Mutex mutexCleared; ', "\n";
   print '  SPL::CV cvCleared; ', "\n";
   print '  ', "\n";
   print '  // private functions', "\n";
   print '  bool itsOurTurn(uint32_t ourPort);', "\n";
   print '  bool allCaughtUp(uint32_t* counters, uint32_t port);', "\n";
   print "\n";
   print '}; ', "\n";
   print "\n";
   print "\n";
   SPL::CodeGen::headerEpilogue($model);
   print "\n";
   print "\n";
   CORE::exit $SPL::CodeGen::USER_ERROR if ($SPL::CodeGen::sawError);
}
1;
