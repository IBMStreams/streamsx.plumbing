<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="spldoc_compilationunit">
<title>SPL File <tt>controlledswitch.spl</tt></title>
<refbody>
<section>
<p>
<xref href="../toolkits/toolkits.xml">streamsx.plumbing</xref> &gt; <xref href="tk$com.ibm.streamsx.plumbing.xml">com.ibm.streamsx.plumbing 0.3.0.__dev__</xref> &gt; <xref href="ns$com.ibm.streamsx.plumbing.switches.xml">com.ibm.streamsx.plumbing.switches</xref> &gt; controlledswitch.spl</p>
</section>
<section>
  <title outputclass="splhead-1">Content</title>
  <dl>
    <dlentry><dt></dt><dd></dd></dlentry>
    <dlentry>
      <dt outputclass="splhead-2">Operators</dt>
      <dd>
<sl>
<sli><b><xref href="spl$com.ibm.streamsx.plumbing.switches$controlledswitch.xml#spldoc_compilationunit/composite_operator__ControlledSwitch">ControlledSwitch</xref></b>: Controlled switch.
</sli>
</sl>
      </dd>
    </dlentry>
    <dlentry>
      <dt outputclass="splhead-2">Functions</dt>
      <dd>
<sl>
<sli><b><xref href="spl$com.ibm.streamsx.plumbing.switches$controlledswitch.xml#spldoc_compilationunit/function____initSwitch.rstring.boolean">__initSwitch(rstring, boolean)</xref></b>
</sli>
<sli><b><xref href="spl$com.ibm.streamsx.plumbing.switches$controlledswitch.xml#spldoc_compilationunit/function__getSwitchState.rstring">getSwitchState(rstring)</xref></b>: Get the state of a switch with control variable <tt>name</tt>.
</sli>
<sli><b><xref href="spl$com.ibm.streamsx.plumbing.switches$controlledswitch.xml#spldoc_compilationunit/function__registerSwitch.rstring.boolean">registerSwitch(rstring, boolean)</xref></b>: Register that an operator invocation will call <xref href="spl$com.ibm.streamsx.plumbing.switches$controlledswitch.xml#spldoc_compilationunit/function__setSwitchState.rstring.boolean">setSwitchState(rstring, boolean)</xref> or <xref href="spl$com.ibm.streamsx.plumbing.switches$controlledswitch.xml#spldoc_compilationunit/function__getSwitchState.rstring">getSwitchState(rstring)</xref>.
</sli>
<sli><b><xref href="spl$com.ibm.streamsx.plumbing.switches$controlledswitch.xml#spldoc_compilationunit/function__setSwitchState.rstring.boolean">setSwitchState(rstring, boolean)</xref></b>: Set the state of switches with control variable <tt>name</tt>.
</sli>
</sl>
      </dd>
    </dlentry>
  </dl>
</section>
<section>
  <title outputclass="splhead-1">Composites</title>
</section>
<section id="composite_operator__ControlledSwitch">
  <title outputclass="splpart">composite ControlledSwitch(output OUT; input IN)</title>
</section>
<section>

<p>Controlled switch.
</p>
<p>A controlled version of the SPL Standard toolkit <tt>Switch</tt> operator. When the switch is closed (state is <tt>true</tt>) tuples on its input port flow through it its output port unchanged.
</p>
<p>When the switch is open (state is <tt>false</tt>) tuples on its input port are blocked from flowing. Blocked tuples remain on the stream and will be submitted to the output stream once the switch is closed. Opening the switch can result in upstream processing being halted due to back pressure.
</p>
<p>Operator invocations in the same job register an interest in controlling this switch by calling <xref href="spl$com.ibm.streamsx.plumbing.switches$controlledswitch.xml#spldoc_compilationunit/function__registerSwitch.rstring.boolean">registerSwitch(rstring, boolean)</xref> passing the name of this switch. Then the state of this switch is changed by calling <xref href="spl$com.ibm.streamsx.plumbing.switches$controlledswitch.xml#spldoc_compilationunit/function__setSwitchState.rstring.boolean">setSwitchState(rstring, boolean)</xref>.
</p>
<p>A <tt>boolean</tt> control variable named <tt>name</tt> is created in the Job Control Plane which provides notifications and operations to control if the switch is open or closed. 
</p>
<p>Multiple invocations of <tt>ControlledSwitch</tt> can share the same name and will then be controlled by the same control variable. Any call to <xref href="spl$com.ibm.streamsx.plumbing.switches$controlledswitch.xml#spldoc_compilationunit/function__setSwitchState.rstring.boolean">setSwitchState(rstring, boolean)</xref> sets the state of all switches with the same name.
</p>
<p>In the case of failure the state of the switch is retained by the Job Control Plane.
</p>
<p>Any application that invokes this operator must include a single invocation of the <tt>spl.control::JobControlPlane</tt> operator.
</p>
</section>
<section>
<title>Parameters</title>
<sl>
<sli><b>name</b>: Name of the switch. 
</sli>
<sli><b>initialState</b>: This is an optional parameter of type boolean, which specifies if the Switch operator starts in the open (false -&gt; blocked) or closed (true -&gt; flowing) state. If not specified, the value is false. 
</sli>
</sl>
</section>
<section>
<title>Input Ports</title>
<sl>
<sli><b>IN</b>: Input stream to be switched
</sli>
</sl>
</section>
<section>
<title>Output Ports</title>
<sl>
<sli><b>OUT</b>: Output stream tuples are submitted to when the switch is closed
</sli>
</sl>
</section>
<section>
  <title outputclass="splhead-2">Composite Operator Graph</title>
</section>
<section outputclass="splgraph">
  <image href="../../image/tk$com.ibm.streamsx.plumbing/op$com.ibm.streamsx.plumbing.switches$ControlledSwitch.svg" width="252" height="114">
    <alt>SPL composite operator image not displayed. Problem loading file: ../../image/tk$com.ibm.streamsx.plumbing/op$com.ibm.streamsx.plumbing.switches$ControlledSwitch.svg
</alt>
  </image>
</section>
<section>
  <title outputclass="splhead-2">SPL Source Code</title>
</section>

<section>
   <codeblock>
<![CDATA[
 public composite ControlledSwitch(input IN; output OUT)
 {
    param
         expression<rstring> $name;
         expression<boolean> $initialState : false;
     graph
 
         stream<IN> OUT = Switch(IN ; SwitchControl)
         {
             logic state: {boolean _dummy = __initSwitch($name, $initialState);}
             param
                 status : getSwitchState($name) ;
                 initialStatus: getSwitchState($name);
             config placement: partitionColocation(getThisCompositeInstanceName());
         }
         // this issues an attribute change notification which is then
         // sent to the Switch's control port. This will then call
         // getSwitchState() to set the switch to its correct state.
         stream<MBeanNotificationBase> SwitchControl = ControlVariableChange()
         {
             param
                 name : $name;
             config placement: partitionColocation(getThisCompositeInstanceName());
         }
 }
]]>
   </codeblock>
</section>
<section>
  <title outputclass="splhead-1">Functions</title>
</section>
<section id="function____initSwitch.rstring.boolean">
  <title outputclass="splpart">boolean __initSwitch(rstring name, boolean initialState)</title>
</section><section>
<title>Parameters</title>
 <sl>
   <sli>
<b>name</b>
   </sli>
   <sli>
<b>initialState</b>
   </sli>
 </sl>
</section>
<section>
<title>Returns</title>
<sl><sli>
<tt>boolean</tt>
</sli></sl>
</section>
<section>
  <title outputclass="splhead-2">SPL Source Code</title>
</section>
<section>
   <codeblock>
<![CDATA[
 stateful boolean __initSwitch(rstring name, boolean initialState)
 {
 	return registerSwitch(name, initialState) ;
 }
]]>
   </codeblock>
</section>
<section id="function__registerSwitch.rstring.boolean">
  <title outputclass="splpart">boolean registerSwitch(rstring name, boolean initialState)</title>
</section><section>

<p>Register that an operator invocation will call <xref href="spl$com.ibm.streamsx.plumbing.switches$controlledswitch.xml#spldoc_compilationunit/function__setSwitchState.rstring.boolean">setSwitchState(rstring, boolean)</xref> or <xref href="spl$com.ibm.streamsx.plumbing.switches$controlledswitch.xml#spldoc_compilationunit/function__getSwitchState.rstring">getSwitchState(rstring)</xref>. A  shared <tt>boolean</tt> control variable is created with name <tt>name</tt>.
</p>
<p>This function must be called in the <tt>logic state</tt> section of any operator invocation that calls <tt>setSwitchState</tt> or <tt>getSwitchState</tt>.
</p>
</section>
<section>
<title>Parameters</title>
 <sl>
   <sli>
<b>name</b>
   </sli>
   <sli>
<b>initialState</b>
   </sli>
 </sl>
</section>
<section>
<title>Returns</title>
<sl><sli>
<tt>true</tt></sli></sl>
</section>
<section>
  <title outputclass="splhead-2">SPL Source Code</title>
</section>
<section>
   <codeblock>
<![CDATA[
 public stateful boolean registerSwitch(rstring name, boolean initialState)
 {
 	return createBooleanControlVariable(name, true, initialState) ;
 }
]]>
   </codeblock>
</section>
<section id="function__setSwitchState.rstring.boolean">
  <title outputclass="splpart">void setSwitchState(rstring name, boolean on)</title>
</section><section>

<p>Set the state of switches with control variable <tt>name</tt>. If <tt>on</tt> is <tt>true</tt> then the switch is closed. If <tt>on</tt> is <tt>false</tt> then the switch is open.
</p>
<p>Any operator that invokes this must call <xref href="spl$com.ibm.streamsx.plumbing.switches$controlledswitch.xml#spldoc_compilationunit/function__registerSwitch.rstring.boolean">registerSwitch(rstring, boolean)</xref> in its <tt>logic state</tt> section, passing the same value for <tt>name</tt>.
</p>
<p>Any operator may invoke this method to control <xref href="spl$com.ibm.streamsx.plumbing.switches$controlledswitch.xml#spldoc_compilationunit/composite_operator__ControlledSwitch">ControlledSwitch</xref> operator invocations within the same job, that were invoked with their parameter <tt>name</tt> set to <tt>name</tt>.
</p>
</section>
<section>
<title>Parameters</title>
 <sl>
   <sli>
<b>name</b>: Name of the switch
   </sli>
   <sli>
<b>on</b>: State to set the switch to.
   </sli>
 </sl>
</section>
<section>
</section>
<section>
  <title outputclass="splhead-2">SPL Source Code</title>
</section>
<section>
   <codeblock>
<![CDATA[
 public stateful void setSwitchState(rstring name, boolean  on)
 {
 	setBooleanControlVariable(name, on) ;
 }
]]>
   </codeblock>
</section>
<section id="function__getSwitchState.rstring">
  <title outputclass="splpart">boolean getSwitchState(rstring name)</title>
</section><section>

<p>Get the state of a switch with control variable <tt>name</tt>.
</p>
<p>Any operator that invokes this must call <xref href="spl$com.ibm.streamsx.plumbing.switches$controlledswitch.xml#spldoc_compilationunit/function__registerSwitch.rstring.boolean">registerSwitch(rstring, boolean)</xref> in its <tt>logic state</tt> section, passing the same value for <tt>name</tt>.
</p>
</section>
<section>
<title>Parameters</title>
 <sl>
   <sli>
<b>name</b>: Name of the variable for the <tt>RandomLoadShedder</tt> operator invocation(s).
   </sli>
 </sl>
</section>
<section>
<title>Returns</title>
<sl><sli>
<tt>boolean</tt>
</sli></sl>
</section>
<section>
  <title outputclass="splhead-2">SPL Source Code</title>
</section>
<section>
   <codeblock>
<![CDATA[
 public boolean getSwitchState(rstring name)
 {
 	return getBooleanControlVariable(name) ;
 }
]]>
   </codeblock>
</section>
</refbody>
</reference>

