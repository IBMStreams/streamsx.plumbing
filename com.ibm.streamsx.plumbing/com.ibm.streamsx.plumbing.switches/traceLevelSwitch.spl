/*
# Licensed Materials - Property of IBM
# Copyright IBM Corp. 2016
*/
namespace com.ibm.streamsx.plumbing.switches ;

/**
 * Non-blocking switch set by application trace level. 
 *
 * When the switch is closed all tuples on its input port
 * flow through to its output port unchanged. The switch
 * is closed if `isTraceable(traceThreshold)` is `true`
 * or `forceClosed` is `true`, otherwise it is open.
 *
 * When the switch is open tuples on its input port are discarded,
 * thus not blocking any upstream processing.
 *
 * A change in the application trace level for the PE hosting
 * an invocation of `TraceLevelSwitch` dynamically changes
 * the state of the switch according to the operator's parameters.
 * 
 * @param forceClosed Optional parameter forces this switch to be closed
 * regardless of application trace level. When set to `true` the switch
 * is closed, otherwise its state is set by the trace level.
 * This parameter is `false` by default. 
 * @param traceThreshold The application trace level at which this switch closes. Defaults to `TraceLevel.trace`.
 * 
 * @input IN Input stream to be switched
 * @output OUT Output stream tuples are submitted to when the switch is closed
 */
public composite TraceLevelSwitch (input IN ; output OUT)
{
  param 
    expression<boolean> $forceClosed : false;
    expression<Trace.Level> $traceThreshold : Trace.trace;
  graph 
    stream<IN> OUT = Filter(IN) {
      param
        filter : $forceClosed || isTraceable($traceThreshold);
    }
}
