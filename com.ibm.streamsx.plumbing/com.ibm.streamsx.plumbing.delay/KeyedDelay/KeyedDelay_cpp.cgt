/*
# Licensed Materials - Property of IBM
# Copyright IBM Corp. 2017, 2019
*/

/*
Code contributions were made by three of the Streams team members.

The KeyedDelay operator is used to delay the incoming tuples for a configured 
amount of seconds before sending them out for downstream processing.

Such incoming tuples requiring a delayed send must arrive on the first input port of
this operator. Those tuples are stored inside this operator's memory based on a specified
key that is present in one of the tuple attributes. Additionally, this operator will also 
allow the user to arbitrarily change the delay time on the basis of either per tuple or 
per group of tuples. It also provides a way for the user to delete an existing tuple being 
held in memory before its full delay time is realized. If the user wants to get a snapshot of all the tuples
currently being delayed, this operator provides a mechanism to do that as well.
When a new data tuple arrives on the first input port, then an earlier tuple with the same key 
already being held/delayed in memory will be replaced with the newly arrived tuple and the count down for the
delay time will be started freshly. When the delay time is set to 0, then the incoming data tuples will
be sent out immediately without incurring any delay. When the operator parameter allowDelayOverride is 
set to true, then the delay override can be done using one of the two ways as explained below.
First way is to send a separate delay override tuple into the third input port of this operator with a new delay value. 
Second way is to have an attribute in the regular data tuple going into the first input port of this operator to 
carry the delay value required for that particular tuple. If the user wants to use the second way, it is necessary to 
specify the delay attribute name via the delayOverrideAttribute parameter. It is recommended to use one of these two 
delay override ways during the life of an application to follow a consistent approach instead of using both ways.
First way is ideal if the delay override is needed periodically after a batch of incoming data tuples.
Second way is ideal if the delay override is needed for every incoming data tuple.

Possible use cases where this operator can be used:

1) Aging out tuples based on application specific criteria.
2) Response timeout detection and replaying data tuples to an external service.
3) Event notification to external consuming applications at a later time.
4) Design patterns requiring storing and forwarding of tuples after a preset delay.
*/

<%
    my $key = $model->getParameterByName("key");
    $key = $key->getValueAt(0)->getSPLExpression();
    # The $key may have the InputStreamName.attribute (e-g: FlightIn.flightId)
    # We will need only the attribute name without the input stream name.
    my @fields = split /\./, $key;

    # Check the field array size.
    if ($#fields > 0) { 
       $key = $fields[1];
    } else {
       $key = $fields[0];
    }

    # Find out the SPL type of the key attribute in the very first input stream coming into this operator.
    my $firstInputPort = $model->getInputPortAt(0);
    my $attributeCntForFirstInputPort = $firstInputPort->getNumberOfAttributes();

    # Let us loop through the attributes and get the SPL type of the key attribute.
    my $keyAttributeSplType = "";

    for (my $i=0; $i<$attributeCntForFirstInputPort; $i++) {
        if ($firstInputPort->getAttributeAt($i)->getName() eq $key) {
           $keyAttributeSplType = $firstInputPort->getAttributeAt($i)->getSPLType();
           last;
        }
    }

    if ($keyAttributeSplType eq "") {
       SPL::CodeGen::exitln("KeyedDelay_cpp.cgt: [key parameter error] Unable to get the SPL type of the key attribute named " . $key . ".\n");
    }

    my $delay = $model->getParameterByName("delay");
    $delay = $delay->getValueAt(0)->getCppExpression();
    my $allowDelayOverride = $model->getParameterByName("allowDelayOverride");
    $allowDelayOverride = $allowDelayOverride->getValueAt(0)->getCppExpression();

    # This is an optional parameter.
    my $delayOverrideAttribute = $model->getParameterByName("delayOverrideAttribute");
    $delayOverrideAttribute = $delayOverrideAttribute ? $delayOverrideAttribute->getValueAt(0)->getSPLExpression() : "";

    if ($delayOverrideAttribute ne "") {
       # The $delayOverrideAttribute may have the InputStreamName.attribute (e-g: FlightIn.delay)
       # We will need only the attribute name without the input stream name.
       my @fields2 = split /\./, $delayOverrideAttribute;

       # Check the field array size.
       if ($#fields2 > 0) { 
          $delayOverrideAttribute = $fields2[1];
       } else {
          $delayOverrideAttribute = $fields2[0];
       }

       my $delayOverrideAttributeSplType = "";

       for (my $i=0; $i<$attributeCntForFirstInputPort; $i++) {
          if ($firstInputPort->getAttributeAt($i)->getName() eq $delayOverrideAttribute) {
             $delayOverrideAttributeSplType = $firstInputPort->getAttributeAt($i)->getSPLType();
             last;
          }
       }

       if ($delayOverrideAttributeSplType eq "") {
          SPL::CodeGen::exitln("KeyedDelay_cpp.cgt: Input tuple attribute " . $delayOverrideAttribute . " specified for the delayOverrideAttribute parameter is not present in the first input stream.");
       }

       if ($delayOverrideAttributeSplType ne "float64") {
          SPL::CodeGen::exitln("KeyedDelay_cpp.cgt: Input tuple attribute " . $delayOverrideAttribute . " specified for the delayOverrideAttribute parameter is of not SPL type float64.");
       }
    }

    my $shutdownSnapshotFileName = $model->getParameterByName("shutdownSnapshotFileName");
   
    if ($shutdownSnapshotFileName) {
       $shutdownSnapshotFileName = $shutdownSnapshotFileName->getValueAt(0)->getCppExpression();
    } else {
       # This is an optional parameter. User may not have specified it in the SPL operator invocation code.
       $shutdownSnapshotFileName = "";
    }

    my $numberOfOutputPorts = $model->getNumberOfOutputPorts();
    
    # Third input stream is used to change/override the delay time value.
    # We must ensure that it has an attribute named delay in the schema.
    # That attribute will carry the new delay time that user will send.
    my $thirdInputPort = $model->getInputPortAt(2);
    my $attributeCnt = $thirdInputPort->getNumberOfAttributes();

    # Let us loop through the attributes and find out if there is a delay attribute present.
    my $delayAttributeName = "";

    for (my $i=0; $i<$attributeCnt; $i++) {
        if ($thirdInputPort->getAttributeAt($i)->getName() eq "delay") {
           $delayAttributeName = "delay";
           last;
        }
    }
    
    if ($delayAttributeName eq "") {
       SPL::CodeGen::exitln("Third input stream must have an attribute named delay and it must be of type float64.\n");
    }
    
    # Fourth input stream is used to delete an existing data tuple being held inside this operator.
    # We must ensure that it has an attribute that has the same name as the value of the key operator.
    # That attribute will carry the identifier of the tuple that the user wants to erase from the 
    # time ordered list maintained within this operator.
    my $fourthInputPort = $model->getInputPortAt(3);
    $attributeCnt = $fourthInputPort->getNumberOfAttributes();

    # Let us loop through the attributes and find out if there is an attribute that has the 
    # same name as the value of the key operator parameter.
    my $deleteTupleAttributeName = "";

    for (my $i=0; $i<$attributeCnt; $i++) {
        if ($fourthInputPort->getAttributeAt($i)->getName() eq $key) {
           $deleteTupleAttributeName = $key;
           last;
        }
    }

    if ($deleteTupleAttributeName eq "") {
       SPL::CodeGen::exitln("Fourth input stream must have an attribute named " . $key . ".\n");
    }
%>

<%SPL::CodeGen::implementationPrologue($model);%>

// Constructor
// Convert the delay time which is in float64 seconds to uint64 milliseconds as expected by the AgedMap class.
MY_OPERATOR::MY_OPERATOR()
  : _inflightTupleMap((uint64_t)(<%=$delay%> * 1000.00)), _earliestTimestampOfDelayedMessages(0), 
	_delay((uint64_t)(<%=$delay%> * 1000.00)), _allowDelayOverride(<%=$allowDelayOverride%>),
        _delayOverrideAttribute("<%=$delayOverrideAttribute%>"), _shutdownSnapshotFileName(<%=$shutdownSnapshotFileName%>)
{
   // They are already defined in the operator model XML file. Hence, there is no need to explicitly create them here.
   // Simply get the custom metrics already defined for this operator. 
   OperatorMetrics  & opm = getContext().getMetrics();
   _numTuplesDelayed = & opm.getCustomMetricByName("nTuplesDelayed");
   _currentDelay = & opm.getCustomMetricByName("nCurrentDelay");
}

// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
}

void MY_OPERATOR::process(const Tuple & tuple, uint32_t port)
{
    if (port == 0) { 
        // This data tuple is sent by the upstream operator.
        const IPort0Type & ituple = static_cast<const IPort0Type&>(tuple);

    	if ((_allowDelayOverride == true && _delayOverrideAttribute == "" && _delay == 0) ||
            (_allowDelayOverride == false && _delay == 0)) {
           // If the current delay time is set to 0, then there is no need to insert this
           // tuple into our in-flight tuple map. Let us send out this tuple right away.
           {
              // If it is already present in our in-memory map, remove it now.
              // Lock at the minimum scope
              SPL::AutoMutex autoMutex(_mutex);                   
              _inflightTupleMap.eraseIfExists(ituple.get_<%=$key%>());
           }

           IPort0Type & otuple = const_cast<IPort0Type&>(ituple);
           submit(otuple, 0);
    	} else {
           // If the incoming data tuple has a delay override attribute, then we will first
           // set the new delay value for this data tuple.
           if (_allowDelayOverride == true && _delayOverrideAttribute != "") {
              // Set the new delay for this data tuple.
              // Convert the delay time which is in float64 seconds to uint64 milliseconds as expected by the AgedMap class.
              uint64_t newDelay = 0;
              std::string attributeName = "<%=$delayOverrideAttribute%>";

              if (attributeName == "") {
                 attributeName = "dummy";
              }

              ConstValueHandle handle1 = ituple.getAttributeValue(attributeName);
              SPL::float64 const & newDelay_float64 = handle1;
              newDelay = (uint64_t) (newDelay_float64 * 1000.00);

              // Log this event in the PE log.
              SPLAPPTRC(L_DEBUG, "User is overriding the delay time value via the incoming data tuple delay override attribue. Before override=" <<
              _delay << " msec, After override=" << newDelay << " msec.", "KeyedDelay");
              // Lock at the minimum scope
              SPL::AutoMutex autoMutex(_mutex);
              // Change the delay time.
              _delay = newDelay;
              // Set this new delay time value in the AgedMap layer.
              _inflightTupleMap.setExpireTime(newDelay);
           }

           // We will simply insert it into the in-flight tuple map that is periodically
           // scanned for detecting any time-out/delay-completion conditions of this tuple.
           // Lock at the minimum scope
           SPL::AutoMutex autoMutex(_mutex);
           // Before adding this tuple to the map, ensure it is not already there with the same key.
           // If it is already present, remove it before adding the new one.
           _inflightTupleMap.eraseIfExists(ituple.get_<%=$key%>());
           _inflightTupleMap.put(ituple.get_<%=$key%>(), ituple, 0);
        }
    }
    else if (port == 1) {
        // Periodic timer tuple that will make us check for any tuples
        // that have completed their delay time within our inflight tuple map.

        // We will first update the operator metrics during this timer cycle.
        _numTuplesDelayed->setValue(_inflightTupleMap.getNumberOfItemsBeingHeld());
        // Current delay time is internally maintained in milliseconds. Convert it to seconds for this metric update.
        _currentDelay->setValue(_delay/1000);
        
        if (_allowDelayOverride == true) {
            // Lock at the minimum scope
            SPL::AutoMutex autoMutex(_mutex);
            // Detect those tuples who completed their delay time. If there are any, they will be moved 
            // to a separate delay completion list data structure which is internal to
            // the AgedMap implementation. That data structure can be iterated in
            // the code segment outside of this if block.
            //
            // If this operator is configured to allow the override of delay time value,
            // then we will have to go through the entire time ordered list. It will not
            // be a faster execution. We will caution the user about this in the 
            // operator documentation not to use this feature if they plan to have more than
            // 100K entries in our time ordered list.
            // We will call an overloaded expire method that takes an argument to decide
            // whether to check all the list elements for expiration or not.
            // Method argument true here means check all the list elements.
            _inflightTupleMap.expire(true);
        } else {   	    	
           // We will only try to grab the lock and check the map if there are any fully delayed tuples.
           // Get current time.
           uint64_t currentTime = _inflightTupleMap.getCurrentTime();
           if ((currentTime - _earliestTimestampOfDelayedMessages) >= _delay) {
              // Lock at the minimum scope
              SPL::AutoMutex autoMutex(_mutex);
              // Detect tuples that completed their delay. If there are any, they will be moved 
              // to a separate delay completion list data structure which is internal to
              // the AgedMap implementation. That data structure can be iterated in
              // the code segment outside of this if block.
              // This operator is configured not to allow the override of delay time value.
              // In that case, we need not iterate through the entire time ordered list. So, we will
              // call a different overloaded expire method that is more efficient.
              _inflightTupleMap.expire(_earliestTimestampOfDelayedMessages);
	   }
        }

        // Now iterate through delay completed  entries without holding the mutex lock. Since there is only
        // one thread doing this iteration, this is thread-safe.
        // Ignore the third argument below (replayCount). That is something carried over from
        // the legacy code of the customer project where this logic was originally implemented.
        <%=$keyAttributeSplType%> key;
        IPort0Type otuple;
        SPL::uint16 replayCount = 0;
        while (_inflightTupleMap.getExpiredEntry(key, otuple, replayCount)) {
           submit(otuple, 0);
        }
    } else if (port == 2) {
    	// This tuple is sent by an upstream operator, whenever the delay time 
    	// needs to be overridden/changed to a new value. Permit this only if the user
    	// configured this operator to allow such an operation.
    	if (_allowDelayOverride == false) {
            SPLAPPTRC(L_DEBUG, 
            	"User is attempting to override the delay time value when that operation is not permitted.", "KeyedDelay");    		
    	} else {
           const IPort2Type & ituple = static_cast<const IPort2Type&>(tuple);
           // Convert the delay time which is in float64 seconds to uint64 milliseconds as expected by the AgedMap class.
           uint64_t newDelay = (uint64_t) (ituple.get_<%=$delayAttributeName%>() * 1000.00);
           // Log this event in the PE log.
           SPLAPPTRC(L_DEBUG, "User is overriding the delay time value. Before override=" <<
              _delay << " msec, After override=" << newDelay << " msec.", "KeyedDelay");
           // Lock at the minimum scope
           SPL::AutoMutex autoMutex(_mutex);
           // Change the delay time.
           _delay = newDelay;
           // Set this new delay time value in the AgedMap layer.
           _inflightTupleMap.setExpireTime(newDelay);
    	}
    } else if (port == 3) {
    	// In this input port, we will receive a tuple that contains the
    	// identifier of the data tuple that the user wants to delete from
    	// this operator's time ordered list.
        const IPort3Type & ituple = static_cast<const IPort3Type&>(tuple);
    	// Lock at the minimum scope.
    	SPL::AutoMutex autoMutex(_mutex);
        // Delete the data tuple if it is present in our time ordered list.
        bool result = _inflightTupleMap.eraseIfExists(ituple.get_<%=$deleteTupleAttributeName%>());
        
        if (result == true) {
           SPLAPPTRC(L_ERROR, "User action to delete a data tuple waiting for delay completion time." << 
              " <%=$deleteTupleAttributeName%>=" << ituple.get_<%=$deleteTupleAttributeName%>() <<
              ". Result=Successfully deleted.", "KeyedDelay");
        } else {
          SPLAPPTRC(L_ERROR, "User action to delete a data tuple waiting for delay completion time." << 
             " <%=$deleteTupleAttributeName%>=" << ituple.get_<%=$deleteTupleAttributeName%>() <<
             ". Result=Tuple not found.", "KeyedDelay");        	
        }
    } else if (port == 4) {
    	// This is an optional port.
    	// When a tuple arrives in this port, that means a snapshot of the agedMap needs to be sent out.    	
    	<%if ($numberOfOutputPorts > 1) {%>
        bool result = true;
        SPL::list<IPort0Type> timeOrderedListOfItems;

        {
    	   // Lock at the minimum scope.
    	   SPL::AutoMutex autoMutex(_mutex);
           // It is assumed that the second output stream has the same schema as the
           // first input stream as well as the first output stream i.e. schema of the data tuple being delayed.
           result = _inflightTupleMap.getTimeOrderedListOfItems(timeOrderedListOfItems);
           // Release the lock by closing the scope here.
        }

        // If we have a snapshot of the active tuples that are getting delayed, send them out now.
        // We will send one tuple at a time. After sending all the tuples, we will inject a WindowMarker to indicate the end of snapshot. 
    	if (result == true) {
          std::vector<IPort0Type>::iterator iter = timeOrderedListOfItems.begin();
          while(iter != timeOrderedListOfItems.end()) {
             submit(*iter, 1);
             ++iter;
          }

          // Submit a window marker punctuation.
          submit(Punctuation::WindowMarker, 1);
    	}
        <%}%>
    }
}

// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
    // This is an asynchronous call
    // This operator is going to be shudown shortly.
    // If the user of this operator wants us to write the data tuples held in memory to a
    // user specified file, let us do that now. Such data tuples written to that file
    // can be reprocessed later either when the user application is started next time or
    // by a completely different application.
    // User application code can have the required logic to read the contents of the file
    // we will write here and reprocess the data tuples according to the needs of the application.
    // Let us fIrst check if the user has specified a file name.
    if (_shutdownSnapshotFileName == "") {
       // User didn't provide a file name. Hence, he/she has no interest in
       // writing the data tuples held in memory at the time of the operator shutdown.
       return;
    }

    bool result = true;
    SPL::list<IPort0Type> timeOrderedListOfItems;

    {
       // Lock at the minimum scope.
       SPL::AutoMutex autoMutex(_mutex);
       // It is assumed that the second output stream has the same schema as the
       // first input stream as well as the first output stream i.e. schema of the data tuple being delayed.
       result = _inflightTupleMap.getTimeOrderedListOfItems(timeOrderedListOfItems);
       // Release the lock by closing the scope here.
    }

    if (result == false) {
       return;
    }

    // Create the file.
    ofstream outFile;
    outFile.open(_shutdownSnapshotFileName.c_str(), ios::out | ios::trunc);
    
    if (outFile.is_open() == false) {
       // File creation error. Nothing much can be done at this point.
       return;
    }

    outFile << "# This file was created by the IBM Streams com.streamsx.plumbing.delay.KeyedDelay operator.\n";
    outFile << "# It contains the snapshot of the data tuples that were held in this operator's memory at the time when this operator was shutdown.\n";
    outFile << "# This file can be used to reprocess such data tuples during the next application run.\n";

    // If we have a snapshot of the active tuples that are getting delayed, write all of them to
    // a file specified by the user..
    std::vector<IPort0Type>::iterator iter = timeOrderedListOfItems.begin();
    while(iter != timeOrderedListOfItems.end()) {
       outFile << *iter;
       outFile << "\n";
       // std::cout << *iter << std::endl;
       ++iter;
    }

    // Close the file.
    outFile.close();
}


<%SPL::CodeGen::implementationEpilogue($model);%>
