/*
 * Copyright (C) 2013, 2016 International Business Machines Corporation. 
 * All Rights Reserved.
 */

namespace application;

use spl.file::*;

/**
 * tbd ...
 */
rstring SecondsToTimestamp(float64 elapsed) { 
	
	int32 hours = (int32)(elapsed/3600.0);
	int32 minutes = (int32)((elapsed-(float64)hours*3600.0)/60.0);
	int32 seconds = (int32)(fmod(elapsed, 60.0));
	int32 milliseconds = (int32)(fmod(elapsed, 1.0)*1000.0);
	
	return (rstring)minutes + ":" + 
		   (seconds<10 ? "0" : "") + (rstring)seconds + "." + 
		   (milliseconds<100 ? "0" : "") + (milliseconds<10 ? "0" : "") + (rstring)milliseconds ; 
}

composite TestSynchronize4 {

	type PhraseType =  
		rstring outputDirectory, 
		rstring outputFilename, 
		rstring indention,
		rstring phrase, 
		float64 start, 
		float64 duration ;
	
	graph 
	
	stream<PhraseType> Speech1Stream = FileSource() { param file: "sync4.Speech1PhraseStream.in"; format: csv; }
	() as Speech1Sink = FileSink(Speech1Stream) { param file: "debug.TestSynchronize4.Speech1Stream.out"; format: txt; flush: 1u; writePunctuations: true; }
	
	stream<PhraseType> PunctPunct1Stream = Punctor(Speech1Stream) {
	param punctuate: outputDirectory=="WindowMarker"; position: after; }
	() as PunctPunct1Sink = FileSink(PunctPunct1Stream) { param file: "debug.TestSynchronize4.PunctPunct1Stream.out"; format: txt; flush: 1u; writePunctuations: true; }
	
	stream<PhraseType> Punct1Stream as Out1 = Functor(PunctPunct1Stream as Out) {
	param filter: outputDirectory!="WindowMarker"; 
	output Out1: indention = ""; }
	() as Punct1Sink = FileSink(Punct1Stream) { param file: "debug.TestSynchronize4.Punct1Stream.out"; format: txt; flush: 1u; writePunctuations: true; }
	
	
	stream<PhraseType> Speech2Stream = FileSource() { param file: "sync4.Speech2PhraseStream.in"; format: csv; }
	() as Speech2Sink = FileSink(Speech2Stream) { param file: "debug.TestSynchronize4.Speech2Stream.out"; format: txt; flush: 1u; writePunctuations: true; }
	
	stream<PhraseType> PunctPunct2Stream = Punctor(Speech2Stream) {
	param punctuate: outputDirectory=="WindowMarker"; position: after; }
	() as PunctPunct2Sink = FileSink(PunctPunct2Stream) { param file: "debug.TestSynchronize4.PunctPunct2Stream.out"; format: txt; flush: 1u; writePunctuations: true; }
	
	stream<PhraseType> Punct2Stream as Out2 = Functor(PunctPunct2Stream) {
	param filter: outputDirectory!="WindowMarker"; 
	output Out2: indention = "\t\t\t\t"; }
	() as Punct2Sink = FileSink(Punct2Stream) { param file: "debug.TestSynchronize4.Punct2Stream.out"; format: txt; flush: 1u; writePunctuations: true; }
	
	
	stream<PhraseType> TextStream = FileSource() { param file: "sync4.TextPhraseStream.in"; format: csv; }
	() as TextSink = FileSink(TextStream) { param file: "debug.TestSynchronize4.TextStream.out"; format: txt; flush: 1u; writePunctuations: true; }
	
	stream<PhraseType> PunctPunctTStream = Punctor(TextStream) {
	param punctuate: outputDirectory=="WindowMarker"; position: after; }
	() as PunctPunctTSink = FileSink(PunctPunctTStream) { param file: "debug.TestSynchronize4.PunctPunctTStream.out"; format: txt; flush: 1u; writePunctuations: true; }
	
	stream<PhraseType> PunctTStream as OutT = Functor(PunctPunctTStream) {
	param filter: outputDirectory!="WindowMarker"; 
	output OutT: indention = "\t\t\t\t\t\t\t\t"; }
	() as PunctTSink = FileSink(PunctTStream) { param file: "debug.TestSynchronize4.PunctTStream.out"; format: txt; flush: 1u; writePunctuations: true; }
	
	
	( stream<PhraseType> Sync1Stream ;
	  stream<PhraseType> Sync2Stream ;
	  stream<PhraseType> SyncTStream ) = com.ibm.streamsx.plumbing.synchronize::Synchronize(Punct1Stream as In1; Punct2Stream as In2; PunctTStream as InT) {
	param 
		timeAttributes: "start"; 
		//timeFactor: 10.0; // replay 10 times faster than recorded
	config threadedPort: 
		queue(In1, Sys.DropFirst, 1000),
		queue(In2, Sys.DropFirst, 1000),
		queue(InT, Sys.DropFirst, 1000); }	
	() as SyncSink = FileSink(Sync1Stream, Sync2Stream, SyncTStream) { param file: "debug.TestSynchronize4.SyncStreams.out"; format: txt; flush: 1u; writePunctuations: true; }


	() as Transcript = Custom(Sync1Stream, Sync2Stream, SyncTStream as In) {
	logic state: {
		rstring filename = dataDirectory() + "/debug.TestSynchronize4.transcript.out";
		mutable uint64 file = 0; }
	onTuple In: {	
		mutable int32 error = 0;	
		if (file==0ul) { 
 			file = fopen(filename , "w", error); 
			assert(error==0, "sorry, could not open '" + filename + "', " + strerror(error)); }
		if (length(phrase)>0) {
			rstring timeline = indention + "at " + SecondsToTimestamp(start) + " for " + formatNumber(duration,1u,3u,false) + " seconds:\n";
			rstring textline = indention + phrase + "\n\n";
			fwriteString(timeline+textline, file, error);
			assert(error==0, "sorry, could not write to '" + filename + "', " + strerror(error)); } }
	onPunct In: {
		mutable int32 error = 0;
		if (file!=0ul) {	
		fwriteString("------------------------\t------------------------\t------------------------\n", file, error);
		if (currentPunct()==Sys.FinalMarker) { fclose(file, error); } } }
	} 


}
